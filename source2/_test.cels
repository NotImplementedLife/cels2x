import "./_test2.cels";

package A begin
	function gcd(a:int, b:int):int 
	begin
		while b>0 do begin
			var r = a%b; a = b; b = r;
			suspend;
		end;
		return a;
	end;
	
	
	function gcd(a:int, b:int, c:int):int 
	begin
		return gcd(a, gcd(b,c));
	end;
	
	struct X begin
		var a:int; 	
		var b:int;
	end;
end;

function main():int begin
	var y=sum(35, 7);	
	return (lambda () => 
		( A::gcd(y, 49) )
	)();
end;

/*package A begin
	package B begin
		multiframe function gcd(a:int, b:int):int
		begin
			while b>0 do
			begin
				var r:int;
				r=a%b;
				a=b;
				b=r;
				suspend;
			end;
			
			return a;
		end;
		
		var z:int;
		
		multiframe function main():int
		begin
			var x:int = 1;
			
			while gcd(x, 24)!= 8 do
			begin
				x = x+1;
			end;
						
			return x;
		end;
	end;
	
	function w():int begin
		var x:int = 2;
		(lambda (y:int) => (x+y))(2);
	end;
end;
*/